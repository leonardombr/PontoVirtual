1. Modificando o Flyway e o Hibernate

No curso ao executar os testes desabilitamos o Flyway para que as entidades sejam geradas diretamente pelo Hibernate no banco H2, que executa em memória, então no arquivo application-test.properties você deverá alterar da seguinte forma:

Spring 1.5.x:

flyway.enabled=false
Spring 2:

spring.flyway.enabled=false
Já para o Spring Boot 2, devemos adicionar uma configuração adicional ao Hibernate no arquivo application.properties:

spring.jpa.properties.hibernate.id.new_generator_mappings=false
2. Na nova versão do JPA, devemos substituir os comandos findOne e delete por findById e deleteById, respectivamente. Seguem exemplos de como era e como ficará:

Spring 1.5.x:

return Optional.ofNullable(this.lancamentoRepository.findOne(id));
this.lancamentoRepository.delete(id);
Spring 2:

//Repare que no findById não precisamos do Optional pois ele já retorna por padrão assim
return this.lancamentoRepository.findById(id);
this.lancamentoRepository.deleteById(id);
Assim quando for implementar as classes de serviços da API, sempre faça essa alteração quando um do dois métodos forem utilizados.

3. O Spring Security também demanda de uma pequena alteração, sendo assim, quando você estiver criando o arquivo WebSecurityConfig.java, adicione o seguinte método nessa classe para criar corretamente o anthenticationManager:

@Bean(name = BeanIds.AUTHENTICATION_MANAGER)
@Override
public AuthenticationManager authenticationManagerBean() throws Exception {
   return super.authenticationManagerBean();
}
Pronto, seguindo esses passos a sua API será 100% compatível com a mais recente versão do Spring Boot 2!